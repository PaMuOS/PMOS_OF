#N canvas 52 27 933 630 10;
#X obj 490 17 offer;
#X text 155 21 store x \, y pairs of numbers together \, see also:
;
#X msg 52 81 1 10 \, 2 20 \, 3 3.33;
#X floatatom 167 175 5 0 0 0 - - -;
#X obj 166 520 print funbuff;
#X msg 99 110 4 4.4;
#X text 195 98 store x y pairs;
#X msg 120 136 4 44.4;
#X text 193 137 replace a previously stored y value;
#X text 215 173 retrieve corresponding y value;
#X msg 55 315 clear;
#X text 23 296 erase contents;
#X msg 210 228 embed \$1;
#X obj 210 208 tgl 15 0 empty empty empty 0 -6 0 8 -262144 -1 -1 0
1;
#X text 279 222 with nonzero arg the contents of the object are;
#X text 278 233 saved with the patch \, this is the default behaviour
;
#X msg 223 283 goto \$1;
#X floatatom 223 263 5 0 0 0 - - -;
#X text 285 267 jump to x position;
#X msg 224 305 next;
#X text 285 307 and output y val;
#X text 285 278 or next x > num;
#X msg 248 349 min;
#X msg 248 373 max;
#X text 289 351 output smallest;
#X text 289 374 or largest stored y val;
#X msg 52 370 write;
#X text 23 353 save contents;
#X msg 40 430 read;
#X text 22 413 load contents;
#X msg 312 447 read /tmp/test.funbuff;
#X msg 312 426 write /tmp/test.funbuff;
#X text 283 408 with filename as arg no dialog appears:;
#X obj 684 243 funbuff;
#C restore;
#X obj 684 274 print funbuff2;
#X msg 646 108 bang;
#X text 686 108 print status info;
#X msg 604 83 set 1 1 2 2.2 3 3.5;
#X text 554 65 another way to store pairs:;
#X msg 696 134 delete 1 1;
#X text 772 135 delete matching pair;
#X msg 703 164 delete 2;
#X text 766 166 delete pair where x=2;
#X msg 793 208 delete 3 4;
#X text 722 191 no! we don't have it:;
#X obj 664 400 funbuff;
#C restore;
#X obj 686 426 print funbuffY;
#X obj 664 453 print funbuffX;
#X msg 622 340 1 2 \, 3 4 \, 5 6 \, 7 8;
#X msg 671 368 dump;
#X text 768 339 load some vals;
#X text 718 368 and dump them;
#X obj 31 19 funbuff filename;
#C restore;
#X obj 166 494 funbuff /tmp/test.funbuff;
#C restore;
#X text 349 492 arg sets initial filename to load;
#N canvas 28 70 678 307 even 0;
#X obj 119 161 funbuff;
#C restore;
#X msg 43 72 set 1 2 4 5 7 8 11 12 13 14;
#X text 39 55 load some values:;
#X msg 119 97 goto 0;
#X msg 141 128 next;
#X text 174 98 goto start;
#X floatatom 119 259 5 0 0 0 - - -;
#X text 166 258 y value;
#X floatatom 141 230 5 0 0 0 - - -;
#X text 189 229 diff between current and prev x vla;
#X obj 163 194 bng 15 250 50 0 empty empty empty 0 -6 0 8 -262144 -1
-1;
#X text 192 194 we reached the end ...;
#X obj 505 200 funbuff;
#C restore;
#X floatatom 549 117 5 0 0 0 - - -;
#X floatatom 505 170 5 0 0 0 - - -;
#X floatatom 505 248 5 0 0 0 - - -;
#X text 405 149 then x \, and use x to retrieve y:;
#X text 509 98 set y value first:;
#X text 38 27 the other outlets make sense too:;
#X text 399 32 and again another way to load data:;
#X text 185 129 hit this a couple of times;
#X connect 0 0 6 0;
#X connect 0 1 8 0;
#X connect 0 2 10 0;
#X connect 1 0 0 0;
#X connect 3 0 0 0;
#X connect 4 0 0 0;
#X connect 12 0 15 0;
#X connect 13 0 12 1;
#X connect 14 0 12 0;
#X restore 626 533 pd even more ...;
#X obj 4 4 cnv 15 400 40 empty empty empty 20 12 0 14 -262130 -66577 0;
#X text 24 591 docs based on the MAX/MSP reference (c) cycling'74
;
#X text 23 605 ___________________________________________________ ;
#X connect 2 0 53 0;
#X connect 3 0 53 0;
#X connect 5 0 53 0;
#X connect 7 0 53 0;
#X connect 10 0 53 0;
#X connect 12 0 53 0;
#X connect 13 0 12 0;
#X connect 16 0 53 0;
#X connect 17 0 16 0;
#X connect 19 0 53 0;
#X connect 22 0 53 0;
#X connect 23 0 53 0;
#X connect 26 0 53 0;
#X connect 28 0 53 0;
#X connect 30 0 53 0;
#X connect 31 0 53 0;
#X connect 33 0 34 0;
#X connect 35 0 33 0;
#X connect 37 0 33 0;
#X connect 39 0 33 0;
#X connect 41 0 33 0;
#X connect 43 0 33 0;
#X connect 45 0 47 0;
#X connect 45 1 46 0;
#X connect 48 0 45 0;
#X connect 49 0 45 0;
#X connect 53 0 4 0;
